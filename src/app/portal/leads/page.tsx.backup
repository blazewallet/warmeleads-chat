'use client';

import React, { useState, useEffect, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useRouter } from 'next/navigation';
import {
  ArrowLeftIcon,
  PlusIcon,
  PencilIcon,
  TrashIcon,
  FunnelIcon,
  MagnifyingGlassIcon,
  UserIcon,
  BuildingOfficeIcon,
  PhoneIcon,
  EnvelopeIcon,
  CurrencyEuroIcon,
  ClockIcon,
  CheckCircleIcon,
  XCircleIcon,
  MapPinIcon,
  DocumentTextIcon,
  ArrowTopRightOnSquareIcon,
  ChartBarIcon
} from '@heroicons/react/24/outline';
import { useAuthStore } from '@/lib/auth';
import { crmSystem, type Customer, type Lead } from '@/lib/crmSystem';
import { readCustomerLeads, GoogleSheetsService, updateLeadInSheet } from '@/lib/googleSheetsAPI';
import { serviceAccount, shareSheetWithServiceAccount } from '@/lib/googleSheetsServiceAccount';

export default function CustomerLeadsPage() {
  const router = useRouter();
  const { user, isAuthenticated, isLoading: authLoading } = useAuthStore();
  const [customerData, setCustomerData] = useState<Customer | null>(null);
  const [leads, setLeads] = useState<Lead[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<'all' | Lead['status']>('all');
  const [editingLead, setEditingLead] = useState<Lead | null>(null);
  const [showAddForm, setShowAddForm] = useState(false);
  const [viewingLead, setViewingLead] = useState<Lead | null>(null);
  
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [leadsPerPage, setLeadsPerPage] = useState(10);
  
  // Force refresh lead data when viewing
  const handleViewLead = (lead: Lead) => {
    console.log('üîç Opening lead details for:', lead.name);
    console.log('üîç Lead branchData:', lead.branchData);
    
    // Force a fresh copy of the lead with all data
    const freshLead = leads.find(l => l.id === lead.id) || lead;
    console.log('üîç Fresh lead branchData:', freshLead.branchData);
    
    setViewingLead(freshLead);
  };

  // Direct localStorage auth check - more reliable
  useEffect(() => {
    const checkAuth = () => {
      // Check localStorage directly for auth data
      const authStore = localStorage.getItem('warmeleads-auth-store');
      const adminToken = localStorage.getItem('warmeleads_admin_token');
      
      console.log('üîç Direct auth check:', {
        hasAuthStore: !!authStore,
        hasAdminToken: !!adminToken,
        authStoreData: authStore ? 'exists' : 'missing',
        zustandState: { authLoading, isAuthenticated, userEmail: user?.email }
      });
      
      let hasValidAuth = false;
      
      // Check admin token
      if (adminToken === 'admin_authenticated') {
        hasValidAuth = true;
        console.log('‚úÖ Admin authenticated via token');
      }
      
      // Check auth store
      if (authStore) {
        try {
          const parsed = JSON.parse(authStore);
          if (parsed.state?.isAuthenticated && parsed.state?.user?.email) {
            hasValidAuth = true;
            console.log('‚úÖ User authenticated via auth store:', parsed.state.user.email);
          }
        } catch (e) {
          console.log('‚ùå Error parsing auth store');
        }
      }
      
      if (!hasValidAuth) {
        console.log('üö® No valid auth found, redirecting to home');
        router.push('/');
      } else {
        console.log('‚úÖ Valid auth found, staying on leads page');
      }
    };
    
    // Small delay to allow page to mount
    const timer = setTimeout(checkAuth, 100);
    return () => clearTimeout(timer);
  }, [router, authLoading, isAuthenticated, user]);

  // Load customer data and leads
  useEffect(() => {
    if (user?.email) {
      const customers = crmSystem.getAllCustomers();
      const customer = customers.find(c => c.email === user.email);
      
      if (customer) {
        setCustomerData(customer);
        setLeads(customer.leadData || []);
      }
      
      setIsLoading(false);
    }
  }, [user]);

  // Filter, sort and paginate leads
  const { filteredLeads, totalPages, paginatedLeads } = useMemo(() => {
    // Filter leads
    const filtered = leads.filter(lead => {
      const matchesSearch = lead.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        lead.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        lead.company?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        lead.interest.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesFilter = filterStatus === 'all' || lead.status === filterStatus;
      
      return matchesSearch && matchesFilter;
    });
    
    // Sort by date (most recent first)
    const sorted = filtered.sort((a, b) => {
      const dateA = new Date(a.createdAt).getTime();
      const dateB = new Date(b.createdAt).getTime();
      return dateB - dateA; // Most recent first
    });
    
    // Calculate pagination
    const total = Math.ceil(sorted.length / leadsPerPage);
    const startIndex = (currentPage - 1) * leadsPerPage;
    const endIndex = startIndex + leadsPerPage;
    const paginated = sorted.slice(startIndex, endIndex);
    
    return {
      filteredLeads: sorted,
      totalPages: total,
      paginatedLeads: paginated
    };
  }, [leads, searchTerm, filterStatus, currentPage, leadsPerPage]);

  // Calculate statistics based on filtered leads
  const stats = {
    total: filteredLeads.length,
    new: filteredLeads.filter(l => l.status === 'new').length,
    contacted: filteredLeads.filter(l => l.status === 'contacted').length,
    qualified: filteredLeads.filter(l => l.status === 'qualified').length,
    converted: filteredLeads.filter(l => l.status === 'converted').length,
    lost: leads.filter(l => l.status === 'lost').length,
    conversionRate: leads.length > 0 ? (leads.filter(l => l.status === 'converted').length / leads.length * 100) : 0
  };

  const getStatusColor = (status: Lead['status']) => {
    switch (status) {
      case 'new': return 'bg-blue-100 text-blue-800';
      case 'contacted': return 'bg-yellow-100 text-yellow-800';
      case 'qualified': return 'bg-purple-100 text-purple-800';
      case 'converted': return 'bg-green-100 text-green-800';
      case 'lost': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (status: Lead['status']) => {
    switch (status) {
      case 'new': return 'üÜï';
      case 'contacted': return 'üìû';
      case 'qualified': return '‚≠ê';
      case 'converted': return '‚úÖ';
      case 'lost': return '‚ùå';
      default: return '‚ùì';
    }
  };

  const handleUpdateLeadStatus = (leadId: string, newStatus: Lead['status']) => {
    if (customerData) {
      const success = crmSystem.updateCustomerLead(customerData.id, leadId, { status: newStatus });
      if (success) {
        setLeads(prev => prev.map(lead => 
          lead.id === leadId ? { ...lead, status: newStatus, updatedAt: new Date() } : lead
        ));
      }
    }
  };

  const syncWithGoogleSheets = async () => {
    if (!customerData?.googleSheetUrl) {
      alert('‚ùå Geen Google Sheets URL gekoppeld');
      return;
    }
    
    setIsLoading(true);
    try {
            console.log('üîÑ Starting real Google Sheets sync...');
            
            // Extract spreadsheet ID from URL
            const spreadsheetId = GoogleSheetsService.extractSpreadsheetId(customerData.googleSheetUrl);
            if (!spreadsheetId) {
              throw new Error('Ongeldige Google Sheets URL');
            }

            // CRITICAL: Clear existing leads from CRM FIRST
            console.log('üóëÔ∏è Clearing existing leads from CRM...');
            customerData.leadData = [];
            
            // Also clear from localStorage to force refresh
            const crmData = JSON.parse(localStorage.getItem('warmeleads_crm_data') || '{}');
            if (crmData.customers) {
              const customerEntry = crmData.customers.find(([id]: [string, any]) => id === customerData.id);
              if (customerEntry) {
                customerEntry[1].leadData = [];
                localStorage.setItem('warmeleads_crm_data', JSON.stringify(crmData));
                console.log('üóëÔ∏è Cleared leads from localStorage');
              }
            }

            // Read actual data from Google Sheets
            const realLeads = await readCustomerLeads(customerData.googleSheetUrl);
            
            console.log('üìä Real leads loaded from Google Sheets:', realLeads.length);

      // Add each lead from the sheet to the customer
      for (const leadData of realLeads) {
        console.log(`üîß Processing lead ${leadData.name} with branchData:`, leadData.branchData);
        
        const leadToAdd: Omit<Lead, 'id' | 'createdAt' | 'updatedAt'> = {
          name: leadData.name,
          email: leadData.email,
          phone: leadData.phone,
          company: leadData.company,
          address: leadData.address,
          city: leadData.city,
          interest: leadData.interest,
          budget: leadData.budget,
          timeline: leadData.timeline,
          notes: leadData.notes,
          status: leadData.status,
          assignedTo: leadData.assignedTo,
          source: 'import',
          sheetRowNumber: leadData.sheetRowNumber,
          branchData: leadData.branchData // CRITICAL: Include branchData!
        };
        
        console.log(`üîß leadToAdd with branchData:`, leadToAdd.branchData);
        
        crmSystem.addLeadToCustomer(customerData.id, leadToAdd);
      }

            // Refresh data
            const updatedCustomer = crmSystem.getCustomerById(customerData.id);
            if (updatedCustomer) {
              setCustomerData(updatedCustomer);
              setLeads(updatedCustomer.leadData || []);
              
              // Debug: Check what's actually in the leads
              console.log('üîç First 3 leads after sync:', updatedCustomer.leadData?.slice(0, 3).map(lead => ({
                name: lead.name,
                branchData: lead.branchData,
                notes: lead.notes,
                hasZonnepanelen: !!lead.branchData?.zonnepanelen,
                hasStroomverbruik: !!lead.branchData?.stroomverbruik,
                hasRedenThuisbatterij: !!lead.branchData?.redenThuisbatterij
              })));
              
              // Also check what's in the state
              console.log('üîç State leads sample:', updatedCustomer.leadData?.slice(0, 2));
            }

            alert(`‚úÖ ${realLeads.length} echte leads gesynchroniseerd met Google Sheets!`);
    } catch (error) {
      console.error('Sync error:', error);
      
      // Provide helpful error messages
      if (error instanceof Error) {
        if (error.message.includes('API key')) {
          alert('‚ùå Google Sheets API key niet geconfigureerd. Neem contact op met support.');
        } else if (error.message.includes('permission') || error.message.includes('403')) {
          alert('‚ùå Geen toegang tot spreadsheet. Zorg dat de sheet publiek toegankelijk is of deel met onze service account.');
        } else if (error.message.includes('404')) {
          alert('‚ùå Spreadsheet niet gevonden. Controleer de URL.');
        } else {
          alert(`‚ùå Fout bij synchroniseren: ${error.message}`);
        }
      } else {
        alert('‚ùå Onbekende fout bij synchroniseren met Google Sheets');
      }
    } finally {
      setIsLoading(false);
    }
  };

  // Show loading while auth is loading
  if (authLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-brand-purple to-brand-pink flex items-center justify-center">
        <div className="text-center text-white">
          <div className="w-16 h-16 border-4 border-white/30 border-t-white rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-xl">Authenticatie controleren...</p>
        </div>
      </div>
    );
  }

  // Don't render anything if not authenticated (redirect will happen)
  if (!isAuthenticated) {
    return null;
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-brand-purple to-brand-pink flex items-center justify-center">
        <div className="text-center text-white">
          <div className="w-16 h-16 border-4 border-white/30 border-t-white rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-xl">Leads laden...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-brand-purple to-brand-pink">
      {/* Header */}
      <div className="bg-white/10 backdrop-blur-sm border-b border-white/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between py-6">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => router.back()}
                className="flex items-center space-x-2 text-white/80 hover:text-white transition-colors"
              >
                <ArrowLeftIcon className="w-5 h-5" />
                <span>Terug naar account</span>
              </button>
              
              <div className="h-6 w-px bg-white/30"></div>
              
              <div>
                <h1 className="text-2xl font-bold text-white">Mijn Leads</h1>
                <p className="text-white/70">
                  {user?.name} ‚Ä¢ {leads.length} leads totaal
                </p>
              </div>
            </div>

            <div className="flex items-center space-x-3">
              {customerData?.googleSheetUrl && (
                <button
                  onClick={syncWithGoogleSheets}
                  disabled={isLoading}
                  className="bg-green-600 hover:bg-green-700 disabled:bg-green-400 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
                >
                  {isLoading ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                      <span>Synchroniseren...</span>
                    </>
                  ) : (
                    <>
                      <span>üîÑ</span>
                      <span>Sync Google Sheets</span>
                    </>
                  )}
                </button>
              )}
              
              <button
                onClick={() => setShowAddForm(true)}
                className="bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
              >
                <PlusIcon className="w-4 h-4" />
                <span>Nieuwe lead</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-5 gap-6 mb-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-white/95 backdrop-blur-sm rounded-2xl p-6 shadow-lg"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Totaal Leads</p>
                <p className="text-3xl font-bold text-gray-900">{stats.total}</p>
              </div>
              <div className="w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center">
                <UserIcon className="w-6 h-6 text-blue-600" />
              </div>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="bg-white/95 backdrop-blur-sm rounded-2xl p-6 shadow-lg"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Nieuwe</p>
                <p className="text-3xl font-bold text-blue-600">{stats.new}</p>
              </div>
              <div className="w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center">
                <span className="text-xl">üÜï</span>
              </div>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="bg-white/95 backdrop-blur-sm rounded-2xl p-6 shadow-lg"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Gecontacteerd</p>
                <p className="text-3xl font-bold text-yellow-600">{stats.contacted}</p>
              </div>
              <div className="w-12 h-12 bg-yellow-100 rounded-xl flex items-center justify-center">
                <span className="text-xl">üìû</span>
              </div>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
            className="bg-white/95 backdrop-blur-sm rounded-2xl p-6 shadow-lg"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Geconverteerd</p>
                <p className="text-3xl font-bold text-green-600">{stats.converted}</p>
              </div>
              <div className="w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center">
                <span className="text-xl">‚úÖ</span>
              </div>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
            className="bg-white/95 backdrop-blur-sm rounded-2xl p-6 shadow-lg"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Conversie</p>
                <p className="text-3xl font-bold text-purple-600">{stats.conversionRate.toFixed(1)}%</p>
              </div>
              <div className="w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center">
                <ChartBarIcon className="w-6 h-6 text-purple-600" />
              </div>
            </div>
          </motion.div>
        </div>

        {/* Google Sheets Integration Status */}
        {customerData?.googleSheetUrl ? (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="bg-green-50 border border-green-200 rounded-2xl p-6 mb-8"
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center">
                  <span className="text-2xl">üìä</span>
                </div>
                <div>
                  <h3 className="font-bold text-green-900">Google Sheets Gekoppeld</h3>
                  <p className="text-green-700">
                    Uw leads worden automatisch gesynchroniseerd. Wijzigingen hier worden ook in uw spreadsheet bijgewerkt.
                  </p>
                </div>
              </div>
              <div className="flex space-x-3">
                <a
                  href={customerData.googleSheetUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
                >
                  <ArrowTopRightOnSquareIcon className="w-4 h-4" />
                  <span>Open Sheet</span>
                </a>
                <button
                  onClick={syncWithGoogleSheets}
                  className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
                >
                  <span>üîÑ</span>
                  <span>Sync Nu</span>
                </button>
              </div>
            </div>
          </motion.div>
        ) : (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="bg-blue-50 border border-blue-200 rounded-2xl p-6 mb-8"
          >
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center">
                <span className="text-2xl">üìä</span>
              </div>
              <div>
                <h3 className="font-bold text-blue-900">Google Sheets Integratie</h3>
                <p className="text-blue-800">
                  Koppel uw Google Sheets voor automatische lead synchronisatie. 
                  Neem contact op met onze support om dit in te stellen.
                </p>
              </div>
            </div>
          </motion.div>
        )}

        {/* Filters */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.6 }}
          className="bg-white/95 backdrop-blur-sm rounded-2xl p-6 mb-8 shadow-lg"
        >
          <div className="space-y-4 lg:space-y-0 lg:flex lg:gap-4">
            <div className="flex-1 relative">
              <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
              <input
                type="text"
                placeholder="Zoek leads..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-brand-purple focus:border-brand-purple touch-manipulation text-base"
              />
            </div>
            
            <div className="lg:w-64 relative">
              <FunnelIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
              <select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value as any)}
                className="w-full pl-10 pr-8 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-brand-purple focus:border-brand-purple touch-manipulation text-base"
              >
                <option value="all">Alle statussen</option>
                <option value="new">üÜï Nieuw ({stats.new})</option>
                <option value="contacted">üìû Gecontacteerd ({stats.contacted})</option>
                <option value="qualified">‚≠ê Gekwalificeerd ({stats.qualified})</option>
                <option value="converted">‚úÖ Geconverteerd ({stats.converted})</option>
                <option value="lost">‚ùå Verloren</option>
              </select>
            </div>
          </div>
        </motion.div>

        {/* Leads Table */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.7 }}
          className="bg-white/95 backdrop-blur-sm rounded-2xl shadow-lg overflow-hidden"
        >
          {paginatedLeads.length === 0 ? (
            <div className="text-center py-16">
              <UserIcon className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                {searchTerm || filterStatus !== 'all' ? 'Geen leads gevonden' : 'Nog geen leads'}
              </h3>
              <p className="text-gray-600 mb-6">
                {customerData?.googleSheetUrl 
                  ? 'Synchroniseer met Google Sheets om uw leads te importeren.'
                  : 'Uw leads verschijnen hier na aankoop en Google Sheets koppeling.'
                }
              </p>
              {customerData?.googleSheetUrl && (
                <button
                  onClick={syncWithGoogleSheets}
                  className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl font-semibold transition-colors"
                >
                  üîÑ Sync met Google Sheets
                </button>
              )}
            </div>
          ) : (
            {/* Desktop Table View */}
            <div className="hidden lg:block overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Lead Info
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Contact & Locatie
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Interesse & Budget
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acties
                    </th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {paginatedLeads.map((lead) => (
                    <tr 
                      key={lead.id} 
                      className="hover:bg-gray-50 cursor-pointer" 
                      onClick={() => handleViewLead(lead)}
                      title="Klik voor lead details"
                    >
                      <td className="px-6 py-4">
                        <div className="flex items-center">
                          <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl flex items-center justify-center">
                            <span className="text-white font-bold">
                              {lead.name.charAt(0)}
                            </span>
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-bold text-gray-900">
                              {lead.name}
                            </div>
                            {lead.company && (
                              <div className="text-sm text-gray-600 flex items-center">
                                <BuildingOfficeIcon className="w-4 h-4 mr-1" />
                                {lead.company}
                              </div>
                            )}
                            {lead.sheetRowNumber && (
                              <div className="text-xs text-gray-400">
                                Sheet rij: {lead.sheetRowNumber}
                              </div>
                            )}
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="space-y-2">
                          <div className="flex items-center text-sm text-gray-600">
                            <EnvelopeIcon className="w-4 h-4 mr-2" />
                            <a href={`mailto:${lead.email}`} className="hover:text-brand-purple">
                              {lead.email}
                            </a>
                          </div>
                          <div className="flex items-center text-sm text-gray-600">
                            <PhoneIcon className="w-4 h-4 mr-2" />
                            <a href={`tel:${lead.phone}`} className="hover:text-brand-purple">
                              {lead.phone}
                            </a>
                          </div>
                          {lead.branchData?.postcode && lead.branchData?.huisnummer && (
                            <div className="flex items-center text-sm text-gray-600">
                              <MapPinIcon className="w-4 h-4 mr-2" />
                              {lead.branchData.postcode} {lead.branchData.huisnummer}
                            </div>
                          )}
                          {lead.branchData?.datumInteresse && (
                            <div className="text-xs text-gray-500">
                              Interesse: {lead.branchData.datumInteresse}
                            </div>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="space-y-2">
                          <div className="font-medium text-gray-900">{lead.interest}</div>
                          {lead.budget && (
                            <div className="flex items-center text-sm text-gray-600">
                              <CurrencyEuroIcon className="w-4 h-4 mr-2" />
                              {lead.budget}
                            </div>
                          )}
                          
                          {/* Clean table view - branch details only in popup */}
                          <div className="text-xs text-gray-500 italic">
                            üìã Klik voor alle thuisbatterij details
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <select
                          value={lead.status}
                          onChange={(e) => handleUpdateLeadStatus(lead.id, e.target.value as Lead['status'])}
                          onClick={(e) => e.stopPropagation()} // Prevent row click
                          className={`px-3 py-2 text-sm font-medium rounded-lg border-0 ${getStatusColor(lead.status)}`}
                        >
                          <option value="new">üÜï Nieuw</option>
                          <option value="contacted">üìû Gecontacteerd</option>
                          <option value="qualified">‚≠ê Gekwalificeerd</option>
                          <option value="converted">‚úÖ Geconverteerd</option>
                          <option value="lost">‚ùå Verloren</option>
                        </select>
                        <div className="text-xs text-gray-500 mt-1">
                          Bijgewerkt: {new Date(lead.updatedAt).toLocaleDateString('nl-NL')}
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="flex space-x-2">
                          <button
                            onClick={(e) => {
                              e.stopPropagation(); // Prevent row click
                              setEditingLead(lead);
                            }}
                            className="text-blue-600 hover:text-blue-800 transition-colors p-2 hover:bg-blue-50 rounded-lg"
                            title="Bewerken"
                          >
                            <PencilIcon className="w-4 h-4" />
                          </button>
                          <a
                            href={`mailto:${lead.email}`}
                            onClick={(e) => e.stopPropagation()} // Prevent row click
                            className="text-green-600 hover:text-green-800 transition-colors p-2 hover:bg-green-50 rounded-lg"
                            title="Email versturen"
                          >
                            <EnvelopeIcon className="w-4 h-4" />
                          </a>
                          <a
                            href={`tel:${lead.phone}`}
                            onClick={(e) => e.stopPropagation()} // Prevent row click
                            className="text-purple-600 hover:text-purple-800 transition-colors p-2 hover:bg-purple-50 rounded-lg"
                            title="Bellen"
                          >
                            <PhoneIcon className="w-4 h-4" />
                          </a>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {/* Mobile Card View */}
            <div className="lg:hidden space-y-4 p-4">
              {paginatedLeads.map((lead) => (
                <motion.div
                  key={lead.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 cursor-pointer active:bg-gray-50"
                  onClick={() => handleViewLead(lead)}
                >
                  {/* Header */}
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg flex items-center justify-center flex-shrink-0">
                        <span className="text-white font-bold text-sm">
                          {lead.name.charAt(0)}
                        </span>
                      </div>
                      <div className="min-w-0 flex-1">
                        <h3 className="font-semibold text-gray-900 text-sm truncate">{lead.name}</h3>
                        {lead.company && (
                          <p className="text-xs text-gray-500 truncate">{lead.company}</p>
                        )}
                      </div>
                    </div>
                    
                    <select
                      value={lead.status}
                      onChange={(e) => {
                        e.stopPropagation();
                        handleUpdateLeadStatus(lead.id, e.target.value as Lead['status']);
                      }}
                      className={`px-2 py-1 text-xs font-medium rounded-lg border-0 flex-shrink-0 ${getStatusColor(lead.status)}`}
                    >
                      <option value="new">üÜï</option>
                      <option value="contacted">üìû</option>
                      <option value="qualified">‚≠ê</option>
                      <option value="converted">‚úÖ</option>
                      <option value="lost">‚ùå</option>
                    </select>
                  </div>

                  {/* Contact Info */}
                  <div className="space-y-2 mb-3">
                    <div className="flex items-center text-sm text-gray-700">
                      <EnvelopeIcon className="w-4 h-4 mr-2 text-gray-400 flex-shrink-0" />
                      <a href={`mailto:${lead.email}`} className="hover:text-blue-600 truncate min-w-0">
                        {lead.email}
                      </a>
                    </div>
                    <div className="flex items-center text-sm text-gray-700">
                      <PhoneIcon className="w-4 h-4 mr-2 text-gray-400 flex-shrink-0" />
                      <a href={`tel:${lead.phone}`} className="hover:text-blue-600">
                        {lead.phone}
                      </a>
                    </div>
                    {lead.branchData?.postcode && (
                      <div className="flex items-center text-sm text-gray-500">
                        <MapPinIcon className="w-4 h-4 mr-2 text-gray-400 flex-shrink-0" />
                        {lead.branchData.postcode} {lead.branchData.huisnummer}
                      </div>
                    )}
                  </div>

                  {/* Interest & Budget */}
                  <div className="mb-3">
                    <div className="text-sm font-medium text-gray-900 mb-1 truncate">{lead.interest}</div>
                    {lead.budget && (
                      <div className="flex items-center text-sm text-gray-600">
                        <CurrencyEuroIcon className="w-4 h-4 mr-1 flex-shrink-0" />
                        <span className="truncate">{lead.budget}</span>
                      </div>
                    )}
                  </div>

                  {/* Quick Branch Info */}
                  {(lead.branchData?.zonnepanelen || lead.branchData?.stroomverbruik || lead.branchData?.koopintentie) && (
                    <div className="flex flex-wrap gap-1 mb-3">
                      {lead.branchData?.zonnepanelen && (
                        <span className="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full">
                          üåû {lead.branchData.zonnepanelen}
                        </span>
                      )}
                      {lead.branchData?.stroomverbruik && (
                        <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                          ‚ö° {lead.branchData.stroomverbruik}
                        </span>
                      )}
                      {lead.branchData?.koopintentie && (
                        <span className="px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full">
                          üéØ {lead.branchData.koopintentie}
                        </span>
                      )}
                    </div>
                  )}

                  {/* Actions */}
                  <div className="flex items-center justify-between pt-3 border-t border-gray-100">
                    <div className="text-xs text-gray-500">
                      Rij {lead.sheetRowNumber} ‚Ä¢ {new Date(lead.updatedAt).toLocaleDateString('nl-NL')}
                    </div>
                    
                    <div className="flex space-x-1">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          setEditingLead(lead);
                        }}
                        className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors touch-manipulation"
                        title="Bewerken"
                      >
                        <PencilIcon className="w-5 h-5" />
                      </button>
                      <a
                        href={`mailto:${lead.email}`}
                        onClick={(e) => e.stopPropagation()}
                        className="p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors touch-manipulation"
                        title="Email versturen"
                      >
                        <EnvelopeIcon className="w-5 h-5" />
                      </a>
                      <a
                        href={`tel:${lead.phone}`}
                        onClick={(e) => e.stopPropagation()}
                        className="p-2 text-purple-600 hover:bg-purple-50 rounded-lg transition-colors touch-manipulation"
                        title="Bellen"
                      >
                        <PhoneIcon className="w-5 h-5" />
                      </a>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          )}
          
          {/* Pagination Controls - Responsive */}
          {filteredLeads.length > 0 && (
            <div className="px-4 lg:px-6 py-4 bg-gray-50 border-t border-gray-200">
              {/* Mobile Pagination */}
              <div className="lg:hidden space-y-3">
                <div className="text-center">
                  <span className="text-sm text-gray-700">
                    {((currentPage - 1) * leadsPerPage) + 1}-{Math.min(currentPage * leadsPerPage, filteredLeads.length)} van {filteredLeads.length} leads
                  </span>
                </div>
                
                <div className="flex items-center justify-center space-x-2">
                  <button
                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                    className="px-4 py-2 bg-white border border-gray-300 rounded-lg text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 touch-manipulation"
                  >
                    ‚Üê Vorige
                  </button>
                  
                  <span className="px-3 py-2 text-sm font-medium">
                    {currentPage} / {totalPages}
                  </span>
                  
                  <button
                    onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                    disabled={currentPage === totalPages}
                    className="px-4 py-2 bg-white border border-gray-300 rounded-lg text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 touch-manipulation"
                  >
                    Volgende ‚Üí
                  </button>
                </div>
                
                <div className="text-center">
                  <select
                    value={leadsPerPage}
                    onChange={(e) => {
                      setLeadsPerPage(Number(e.target.value));
                      setCurrentPage(1); // Reset to first page
                    }}
                    className="px-3 py-2 border border-gray-300 rounded-lg text-sm bg-white touch-manipulation"
                  >
                    <option value={10}>10 per pagina</option>
                    <option value={25}>25 per pagina</option>
                    <option value={50}>50 per pagina</option>
                    <option value={100}>100 per pagina</option>
                  </select>
                </div>
              </div>

              {/* Desktop Pagination */}
              <div className="hidden lg:flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <span className="text-sm text-gray-700">
                    Toon {((currentPage - 1) * leadsPerPage) + 1}-{Math.min(currentPage * leadsPerPage, filteredLeads.length)} van {filteredLeads.length} leads
                  </span>
                  
                  <select
                    value={leadsPerPage}
                    onChange={(e) => {
                      setLeadsPerPage(Number(e.target.value));
                      setCurrentPage(1); // Reset to first page
                    }}
                    className="px-3 py-1 border border-gray-300 rounded-lg text-sm"
                  >
                    <option value={10}>10 per pagina</option>
                    <option value={25}>25 per pagina</option>
                    <option value={50}>50 per pagina</option>
                    <option value={100}>100 per pagina</option>
                  </select>
                </div>
                
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                    className="px-3 py-1 border border-gray-300 rounded-lg text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100"
                  >
                    Vorige
                  </button>
                  
                  <span className="px-3 py-1 text-sm">
                    Pagina {currentPage} van {totalPages}
                  </span>
                  
                  <button
                    onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                    disabled={currentPage === totalPages}
                    className="px-3 py-1 border border-gray-300 rounded-lg text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100"
                  >
                    Volgende
                  </button>
                </div>
              </div>
            </div>
          )}
        </motion.div>
      </div>

      {/* Lead Detail Modal */}
      <AnimatePresence>
        {viewingLead && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50"
            onClick={() => setViewingLead(null)}
          >
            <motion.div
              initial={{ scale: 0.95, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.95, opacity: 0 }}
              onClick={(e) => e.stopPropagation()}
              className="bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden"
            >
              {/* Header */}
              <div className="bg-gradient-to-r from-brand-purple to-brand-pink p-6 text-white">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-2xl font-bold">{viewingLead.name}</h3>
                    <p className="text-white/80">Lead Details - Rij {viewingLead.sheetRowNumber}</p>
                  </div>
                  <button
                    onClick={() => setViewingLead(null)}
                    className="text-white/80 hover:text-white transition-colors"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>

              {/* Content */}
              <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  {/* Basic Info */}
                  <div className="space-y-6">
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                        <UserIcon className="w-5 h-5 mr-2 text-blue-600" />
                        Contactgegevens
                      </h4>
                      <div className="space-y-3 bg-gray-50 p-4 rounded-lg">
                        <div className="flex items-center">
                          <EnvelopeIcon className="w-4 h-4 mr-3 text-gray-500" />
                          <span className="text-gray-900">{viewingLead.email}</span>
                        </div>
                        <div className="flex items-center">
                          <PhoneIcon className="w-4 h-4 mr-3 text-gray-500" />
                          <span className="text-gray-900">{viewingLead.phone}</span>
                        </div>
                        {viewingLead.branchData?.postcode && viewingLead.branchData?.huisnummer && (
                          <div className="flex items-center">
                            <MapPinIcon className="w-4 h-4 mr-3 text-gray-500" />
                            <span className="text-gray-900">{viewingLead.branchData.postcode} {viewingLead.branchData.huisnummer}</span>
                          </div>
                        )}
                        {viewingLead.company && (
                          <div className="flex items-center">
                            <svg className="w-4 h-4 mr-3 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                            </svg>
                            <span className="text-gray-900">{viewingLead.company}</span>
                          </div>
                        )}
                      </div>
                    </div>

                    {/* Interest & Budget */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                        <CurrencyEuroIcon className="w-5 h-5 mr-2 text-green-600" />
                        Interesse & Budget
                      </h4>
                      <div className="space-y-3 bg-gray-50 p-4 rounded-lg">
                        <div>
                          <span className="text-sm text-gray-500">Interesse:</span>
                          <p className="font-medium text-gray-900">{viewingLead.interest}</p>
                        </div>
                        {viewingLead.budget && (
                          <div>
                            <span className="text-sm text-gray-500">Budget:</span>
                            <p className="font-medium text-gray-900">{viewingLead.budget}</p>
                          </div>
                        )}
                        {viewingLead.branchData?.datumInteresse && (
                          <div>
                            <span className="text-sm text-gray-500">Datum interesse:</span>
                            <p className="font-medium text-gray-900">{viewingLead.branchData.datumInteresse}</p>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Branch-Specific Data */}
                  <div className="space-y-6">
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                        <ChartBarIcon className="w-5 h-5 mr-2 text-purple-600" />
                        Thuisbatterij Specifiek
                      </h4>
                      
                      
                      <div className="space-y-4">
                        {/* Zonnepanelen - FORCE SHOW */}
                        <div className="flex items-center justify-between p-3 bg-yellow-50 rounded-lg">
                          <div className="flex items-center">
                            <div className="w-3 h-3 bg-yellow-400 rounded-full mr-3"></div>
                            <span className="text-sm font-medium text-gray-700">Zonnepanelen</span>
                          </div>
                          <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                            {viewingLead.branchData?.zonnepanelen || 'Geen data'}
                          </span>
                        </div>

                        {/* Dynamisch Contract - FORCE SHOW */}
                        <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                          <div className="flex items-center">
                            <div className="w-3 h-3 bg-blue-400 rounded-full mr-3"></div>
                            <span className="text-sm font-medium text-gray-700">Dynamisch Contract</span>
                          </div>
                          <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                            {viewingLead.branchData?.dynamischContract || 'Geen data'}
                          </span>
                        </div>

                        {/* Stroomverbruik - FORCE SHOW */}
                        <div className="flex items-center justify-between p-3 bg-purple-50 rounded-lg">
                          <div className="flex items-center">
                            <div className="w-3 h-3 bg-purple-400 rounded-full mr-3"></div>
                            <span className="text-sm font-medium text-gray-700">Stroomverbruik</span>
                          </div>
                          <span className="px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-xs font-medium">
                            {viewingLead.branchData?.stroomverbruik || 'Geen data'} kWh
                          </span>
                        </div>

                        {/* Reden Thuisbatterij - FORCE SHOW */}
                        <div className="p-3 bg-indigo-50 rounded-lg">
                          <div className="flex items-center mb-2">
                            <div className="w-3 h-3 bg-indigo-400 rounded-full mr-3"></div>
                            <span className="text-sm font-medium text-gray-700">Reden Thuisbatterij</span>
                          </div>
                          <p className="text-sm text-gray-900 ml-6">{viewingLead.branchData?.redenThuisbatterij || 'Geen data'}</p>
                        </div>

                        {/* Koopintentie - FORCE SHOW */}
                        <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                          <div className="flex items-center">
                            <div className="w-3 h-3 bg-green-400 rounded-full mr-3"></div>
                            <span className="text-sm font-medium text-gray-700">Koopintentie</span>
                          </div>
                          <span className="px-3 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium">
                            {viewingLead.branchData?.koopintentie || 'Geen data'}
                          </span>
                        </div>

                        {/* Nieuwsbrief - FORCE SHOW */}
                        <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center">
                            <div className="w-3 h-3 bg-gray-400 rounded-full mr-3"></div>
                            <span className="text-sm font-medium text-gray-700">Nieuwsbrief</span>
                          </div>
                          <span className="px-3 py-1 bg-gray-100 text-gray-800 rounded-full text-xs font-medium">
                            {viewingLead.branchData?.nieuwsbrief || 'Geen data'}
                          </span>
                        </div>
                      </div>
                    </div>

                    {/* Notes */}
                    {viewingLead.notes && (
                      <div>
                        <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                          <DocumentTextIcon className="w-5 h-5 mr-2 text-orange-600" />
                          Notities
                        </h4>
                        <div className="bg-orange-50 p-4 rounded-lg">
                          <p className="text-sm text-gray-900 whitespace-pre-wrap">{viewingLead.notes}</p>
                        </div>
                      </div>
                    )}
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex justify-end space-x-3 mt-8 pt-6 border-t border-gray-200">
                  <button
                    onClick={() => setViewingLead(null)}
                    className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
                  >
                    Sluiten
                  </button>
                  <button
                    onClick={() => {
                      setEditingLead(viewingLead);
                      setViewingLead(null);
                    }}
                    className="px-6 py-2 bg-gradient-to-r from-brand-purple to-brand-pink text-white rounded-lg hover:shadow-lg transition-all duration-300"
                  >
                    Bewerken
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Lead Edit Modal */}
      <AnimatePresence>
        {editingLead && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50"
            onClick={() => setEditingLead(null)}
          >
            <motion.div
              initial={{ scale: 0.95, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.95, opacity: 0 }}
              onClick={(e) => e.stopPropagation()}
              className="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto"
            >
              <LeadEditForm
                lead={editingLead}
                onSave={async (updatedLead) => {
                  // Update in CRM
                  if (customerData) {
                    const success = crmSystem.updateCustomerLead(customerData.id, editingLead.id, updatedLead);
                    if (success) {
                      // Update local state
                      setLeads(prev => prev.map(lead => 
                        lead.id === editingLead.id ? { ...lead, ...updatedLead } : lead
                      ));
                      
                      // Sync to Google Sheets if linked
                      if (customerData.googleSheetUrl) {
                        try {
                          // Try Service Account first, fallback to API key
                          const spreadsheetId = GoogleSheetsService.extractSpreadsheetId(customerData.googleSheetUrl);
                          if (spreadsheetId) {
                            const updatedLeadData = { ...editingLead, ...updatedLead };
                            
                            // Use Service Account for write access
                            const range = `A${updatedLeadData.sheetRowNumber}:N${updatedLeadData.sheetRowNumber}`;
                            const rowData = [
                              updatedLeadData.name,
                              updatedLeadData.branchData?.datumInteresse || '',
                              updatedLeadData.branchData?.postcode || '',
                              updatedLeadData.branchData?.huisnummer || '',
                              updatedLeadData.phone,
                              updatedLeadData.email,
                              updatedLeadData.branchData?.zonnepanelen || '',
                              updatedLeadData.branchData?.dynamischContract || '',
                              updatedLeadData.branchData?.stroomverbruik || '',
                              updatedLeadData.budget || '',
                              updatedLeadData.branchData?.nieuwsbrief || '',
                              updatedLeadData.branchData?.redenThuisbatterij || '',
                              updatedLeadData.branchData?.koopintentie || '',
                              updatedLeadData.notes || ''
                            ];
                            
                            await serviceAccount.updateSheet(spreadsheetId, range, [rowData]);
                            console.log('‚úÖ Lead updated in Google Sheets via Service Account');
                            alert('‚úÖ Lead succesvol bijgewerkt in portal EN Google Sheets!');
                          }
                        } catch (error) {
                          console.error('Error updating lead in Google Sheets:', error);
                          
                          // Show specific error message with Service Account instructions
                          if (error instanceof Error && (error.message.includes('401') || error.message.includes('403'))) {
                            const instructions = shareSheetWithServiceAccount(customerData.googleSheetUrl);
                            alert(`‚úÖ Lead succesvol bijgewerkt in portal!\n\n${instructions}`);
                          } else {
                            alert(`‚úÖ Lead succesvol bijgewerkt in portal!\n\n‚ùå Google Sheets sync fout: ${error instanceof Error ? error.message : 'Onbekende fout'}`);
                          }
                        }
                      } else {
                        alert('‚úÖ Lead succesvol bijgewerkt!');
                      }
                      
                      setEditingLead(null);
                    }
                  }
                }}
                onCancel={() => setEditingLead(null)}
              />
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

// Lead Edit Form Component
function LeadEditForm({ 
  lead, 
  onSave, 
  onCancel 
}: { 
  lead: Lead; 
  onSave: (updates: Partial<Lead>) => void; 
  onCancel: () => void; 
}) {
  const [formData, setFormData] = useState({
    name: lead.name,
    email: lead.email,
    phone: lead.phone,
    company: lead.company || '',
    address: lead.address || '',
    city: lead.city || '',
    interest: lead.interest,
    budget: lead.budget || '',
    timeline: lead.timeline || '',
    notes: lead.notes || '',
    status: lead.status,
    assignedTo: lead.assignedTo || '',
    // Branch-specific data
    postcode: lead.branchData?.postcode || '',
    huisnummer: lead.branchData?.huisnummer || '',
    zonnepanelen: lead.branchData?.zonnepanelen || '',
    dynamischContract: lead.branchData?.dynamischContract || '',
    stroomverbruik: lead.branchData?.stroomverbruik || '',
    nieuwsbrief: lead.branchData?.nieuwsbrief || '',
    redenThuisbatterij: lead.branchData?.redenThuisbatterij || '',
    koopintentie: lead.branchData?.koopintentie || ''
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const updates: Partial<Lead> = {
      name: formData.name,
      email: formData.email,
      phone: formData.phone,
      company: formData.company,
      address: formData.address,
      city: formData.city,
      interest: formData.interest,
      budget: formData.budget,
      timeline: formData.timeline,
      notes: formData.notes,
      status: formData.status,
      assignedTo: formData.assignedTo,
      updatedAt: new Date(),
      branchData: {
        ...lead.branchData,
        postcode: formData.postcode,
        huisnummer: formData.huisnummer,
        zonnepanelen: formData.zonnepanelen,
        dynamischContract: formData.dynamischContract,
        stroomverbruik: formData.stroomverbruik,
        nieuwsbrief: formData.nieuwsbrief,
        redenThuisbatterij: formData.redenThuisbatterij,
        koopintentie: formData.koopintentie
      }
    };
    
    onSave(updates);
  };

  return (
    <div className="p-6">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">Lead Bewerken</h2>
        <p className="text-gray-600">Bewerk alle gegevens van {lead.name}</p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Basic Info */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Naam *</label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Email *</label>
            <input
              type="email"
              value={formData.email}
              onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Telefoon *</label>
            <input
              type="tel"
              value={formData.phone}
              onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Bedrijf</label>
            <input
              type="text"
              value={formData.company}
              onChange={(e) => setFormData(prev => ({ ...prev, company: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Postcode</label>
            <input
              type="text"
              value={formData.postcode}
              onChange={(e) => setFormData(prev => ({ ...prev, postcode: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Huisnummer</label>
            <input
              type="text"
              value={formData.huisnummer}
              onChange={(e) => setFormData(prev => ({ ...prev, huisnummer: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            />
          </div>
        </div>

        {/* Thuisbatterij Specifiek */}
        <div className="border-t pt-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">üîã Thuisbatterij Specifiek</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Zonnepanelen</label>
              <select
                value={formData.zonnepanelen}
                onChange={(e) => setFormData(prev => ({ ...prev, zonnepanelen: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              >
                <option value="">Selecteer...</option>
                <option value="Ja">Ja</option>
                <option value="Nee">Nee</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Dynamisch Contract</label>
              <select
                value={formData.dynamischContract}
                onChange={(e) => setFormData(prev => ({ ...prev, dynamischContract: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              >
                <option value="">Selecteer...</option>
                <option value="Ja">Ja</option>
                <option value="Nee">Nee</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Stroomverbruik (kWh)</label>
              <input
                type="text"
                value={formData.stroomverbruik}
                onChange={(e) => setFormData(prev => ({ ...prev, stroomverbruik: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="Bijv. 7000"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Koopintentie</label>
              <select
                value={formData.koopintentie}
                onChange={(e) => setFormData(prev => ({ ...prev, koopintentie: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              >
                <option value="">Selecteer...</option>
                <option value="Ja">Ja</option>
                <option value="Nee">Nee</option>
              </select>
            </div>
          </div>
          
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">Reden Thuisbatterij</label>
            <select
              value={formData.redenThuisbatterij}
              onChange={(e) => setFormData(prev => ({ ...prev, redenThuisbatterij: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            >
              <option value="">Selecteer...</option>
              <option value="Kostenbesparing">Kostenbesparing</option>
              <option value="Onafhankelijkheid van het stroomnet">Onafhankelijkheid van het stroomnet</option>
              <option value="Handelen op de dynamische markt">Handelen op de dynamische markt</option>
              <option value="Verduurzamen">Verduurzamen</option>
              <option value="Overig">Overig</option>
            </select>
          </div>
        </div>

        {/* Other Info */}
        <div className="border-t pt-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">üìã Overige Informatie</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Budget</label>
              <input
                type="text"
                value={formData.budget}
                onChange={(e) => setFormData(prev => ({ ...prev, budget: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="Bijv. tussen de ‚Ç¨2500,- en ‚Ç¨5000,-"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
              <select
                value={formData.status}
                onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value as Lead['status'] }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              >
                <option value="new">üÜï Nieuw</option>
                <option value="contacted">üìû Gecontacteerd</option>
                <option value="qualified">‚≠ê Gekwalificeerd</option>
                <option value="converted">‚úÖ Geconverteerd</option>
                <option value="lost">‚ùå Verloren</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Toegewezen aan</label>
              <input
                type="text"
                value={formData.assignedTo}
                onChange={(e) => setFormData(prev => ({ ...prev, assignedTo: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="Naam verkoper"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Timeline</label>
              <input
                type="text"
                value={formData.timeline}
                onChange={(e) => setFormData(prev => ({ ...prev, timeline: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="Bijv. binnen 3 maanden"
              />
            </div>
          </div>
          
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">Notities</label>
            <textarea
              value={formData.notes}
              onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}
              rows={3}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              placeholder="Voeg notities toe..."
            />
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex justify-end space-x-4 pt-6 border-t">
          <button
            type="button"
            onClick={onCancel}
            className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
          >
            Annuleren
          </button>
          <button
            type="submit"
            className="px-6 py-2 bg-gradient-to-r from-brand-purple to-brand-pink text-white rounded-lg hover:shadow-lg transition-all duration-300"
          >
            üíæ Opslaan & Sync
          </button>
        </div>
      </form>
    </div>
  );
}
